experiment: coco
n_iter: 10
seed: 0

sweep:
  source:
  - data::seed:               [0]
    data::pipeline::seed:     [0]
    source::model::seed:      [0]
  - data::seed:               [1]
    data::pipeline::seed:     [1]
    source::model::seed:      [1]
  - data::seed:               [2]
    data::pipeline::seed:     [2]
    source::model::seed:      [2]
  - data::seed:               [3]
    data::pipeline::seed:     [3]
    source::model::seed:      [3]
  - data::seed:               [4]
    data::pipeline::seed:     [4]
    source::model::seed:      [4]
  - data::seed:               [5]
    data::pipeline::seed:     [5]
    source::model::seed:      [5]
  - data::seed:               [6]
    data::pipeline::seed:     [6]
    source::model::seed:      [6]
  - data::seed:               [7]
    data::pipeline::seed:     [7]
    source::model::seed:      [7]
  - data::seed:               [8]
    data::pipeline::seed:     [8]
    source::model::seed:      [8]
  - data::seed:               [9]
    data::pipeline::seed:     [9]
    source::model::seed:      [9]
  target:
  - data::seed:               [0]
    data::pipeline::seed:     [0]
    target::model::seed:      [0]
  - data::seed:               [1]
    data::pipeline::seed:     [1]
    target::model::seed:      [1]
  - data::seed:               [2]
    data::pipeline::seed:     [2]
    target::model::seed:      [2]
  - data::seed:               [3]
    data::pipeline::seed:     [3]
    target::model::seed:      [3]
  - data::seed:               [4]
    data::pipeline::seed:     [4]
    target::model::seed:      [4]
  - data::seed:               [5]
    data::pipeline::seed:     [5]
    target::model::seed:      [5]
  - data::seed:               [6]
    data::pipeline::seed:     [6]
    target::model::seed:      [6]
  - data::seed:               [7]
    data::pipeline::seed:     [7]
    target::model::seed:      [7]
  - data::seed:               [8]
    data::pipeline::seed:     [8]
    target::model::seed:      [8]
  - data::seed:               [9]
    data::pipeline::seed:     [9]
    target::model::seed:      [9]
  dalupi:
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [0]
    data::pipeline::seed:                [0]
    dalupi::model::seed:                 [0]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [1]
    data::pipeline::seed:                [1]
    dalupi::model::seed:                 [1]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [2]
    data::pipeline::seed:                [2]
    dalupi::model::seed:                 [2]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [3]
    data::pipeline::seed:                [3]
    dalupi::model::seed:                 [3]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [4]
    data::pipeline::seed:                [4]
    dalupi::model::seed:                 [4]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [5]
    data::pipeline::seed:                [5]
    dalupi::model::seed:                 [5]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [6]
    data::pipeline::seed:                [6]
    dalupi::model::seed:                 [6]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [7]
    data::pipeline::seed:                [7]
    dalupi::model::seed:                 [7]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [8]
    data::pipeline::seed:                [8]
    dalupi::model::seed:                 [8]
  - data::pipeline::num_train_pi_source: [1.0]
    data::pipeline::num_train_pi_target: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [9]
    data::pipeline::seed:                [9]
    dalupi::model::seed:                 [9]
  lupi:
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [0]
    data::pipeline::seed:                [0]
    lupi::model::seed:                   [0]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [1]
    data::pipeline::seed:                [1]
    lupi::model::seed:                   [1]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [2]
    data::pipeline::seed:                [2]
    lupi::model::seed:                   [2]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [3]
    data::pipeline::seed:                [3]
    lupi::model::seed:                   [3]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [4]
    data::pipeline::seed:                [4]
    lupi::model::seed:                   [4]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [5]
    data::pipeline::seed:                [5]
    lupi::model::seed:                   [5]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [6]
    data::pipeline::seed:                [6]
    lupi::model::seed:                   [6]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [7]
    data::pipeline::seed:                [7]
    lupi::model::seed:                   [7]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [8]
    data::pipeline::seed:                [8]
    lupi::model::seed:                   [8]
  - data::pipeline::num_train_pi_source: [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [9]
    data::pipeline::seed:                [9]
    lupi::model::seed:                   [9]
  dann:
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [0]
    data::pipeline::seed:                [0]
    dann::model::seed:                   [0]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [1]
    data::pipeline::seed:                [1]
    dann::model::seed:                   [1]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [2]
    data::pipeline::seed:                [2]
    dann::model::seed:                   [2]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [3]
    data::pipeline::seed:                [3]
    dann::model::seed:                   [3]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [4]
    data::pipeline::seed:                [4]
    dann::model::seed:                   [4]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [5]
    data::pipeline::seed:                [5]
    dann::model::seed:                   [5]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [6]
    data::pipeline::seed:                [6]
    dann::model::seed:                   [6]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [7]
    data::pipeline::seed:                [7]
    dann::model::seed:                   [7]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [8]
    data::pipeline::seed:                [8]
    dann::model::seed:                   [8]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [9]
    data::pipeline::seed:                [9]
    dann::model::seed:                   [9]
  adapt_dann:
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [0]
    data::pipeline::seed:                 [0]
    adapt_dann::model::random_state:      [0]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [1]
    data::pipeline::seed:                 [1]
    adapt_dann::model::random_state:      [1]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [2]
    data::pipeline::seed:                 [2]
    adapt_dann::model::random_state:      [2]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [3]
    data::pipeline::seed:                 [3]
    adapt_dann::model::random_state:      [3]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [4]
    data::pipeline::seed:                 [4]
    adapt_dann::model::random_state:      [4]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [5]
    data::pipeline::seed:                 [5]
    adapt_dann::model::random_state:      [5]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [6]
    data::pipeline::seed:                 [6]
    adapt_dann::model::random_state:      [6]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [7]
    data::pipeline::seed:                 [7]
    adapt_dann::model::random_state:      [7]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [8]
    data::pipeline::seed:                 [8]
    adapt_dann::model::random_state:      [8]
  - data::pipeline::num_train_pi_target:  [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                           [9]
    data::pipeline::seed:                 [9]
    adapt_dann::model::random_state:      [9]
  adapt_mdd:
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [0]
    data::pipeline::seed:                [0]
    adapt_mdd::model::random_state:      [0]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [1]
    data::pipeline::seed:                [1]
    adapt_mdd::model::random_state:      [1]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [2]
    data::pipeline::seed:                [2]
    adapt_mdd::model::random_state:      [2]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [3]
    data::pipeline::seed:                [3]
    adapt_mdd::model::random_state:      [3]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [4]
    data::pipeline::seed:                [4]
    adapt_mdd::model::random_state:      [4]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [5]
    data::pipeline::seed:                [5]
    adapt_mdd::model::random_state:      [5]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [6]
    data::pipeline::seed:                [6]
    adapt_mdd::model::random_state:      [6]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [7]
    data::pipeline::seed:                [7]
    adapt_mdd::model::random_state:      [7]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [8]
    data::pipeline::seed:                [8]
    adapt_mdd::model::random_state:      [8]
  - data::pipeline::num_train_pi_target: [0.2, 0.4, 0.6, 0.8, 1.0]
    data::seed:                          [9]
    data::pipeline::seed:                [9]
    adapt_mdd::model::random_state:      [9]

source: &source
- default::batch_size: [16, 32, 64]
  default::lr: [1.0e-4, 1.0e-3]
  default::optimizer__weight_decay: [1.0e-4, 1.0e-3]
  default::module::featurizer__p_dropout: [0, 0.1, 0.2, 0.5]
  default::module::task__is_nonlinear: [true, false]
  callbacks__lr_scheduler__step_size: [15, 30, 100]

target: *source

dalupi:
- default::batch_size: [16, 32, 64]
  default::lr: [1.0e-4, 1.0e-3]
  default::optimizer__weight_decay: [1.0e-4, 1.0e-3]
  dalupi::module::rpn_fg_iou_thresh: [0.6, 0.7, 0.8, 0.9]
  dalupi::module::rpn_bg_iou_thresh: [0.2, 0.3, 0.4]
  dalupi::module::rpn_batch_size_per_image: [32, 64, 128, 256]
  dalupi::module::rpn_positive_fraction: [0.4, 0.5, 0.6, 0.7]
  dalupi::module::rpn_nms_thresh: [0.6, 0.7, 0.8]
  dalupi::module::box_roi_pool_output_size: [5, 7, 9]
  dalupi::module::box_fg_iou_thresh: [0.5, 0.6]
  dalupi::module::box_bg_iou_thresh: [0.4, 0.5]
  dalupi::module::box_batch_size_per_image: [16, 32, 64, 128]
  dalupi::module::box_positive_fraction: [0.2, 0.25, 0.3]
  dalupi::module::box_nms_thresh: [0.4, 0.5, 0.6]
  dalupi::module::box_detections_per_img: [25, 50, 75, 100]
  callbacks__lr_scheduler__step_size: [15, 30, 100]

lupi:
- default::batch_size: [16, 32, 64]
  default::lr: [1.0e-4, 1.0e-3]
  default::optimizer__weight_decay: [1.0e-4, 1.0e-3]
  lupi::module::rpn_fg_iou_thresh: [0.6, 0.7, 0.8, 0.9]
  lupi::module::rpn_bg_iou_thresh: [0.2, 0.3, 0.4]
  lupi::module::rpn_batch_size_per_image: [32, 64, 128, 256]
  lupi::module::rpn_positive_fraction: [0.4, 0.5, 0.6, 0.7]
  lupi::module::rpn_nms_thresh: [0.6, 0.7, 0.8]
  lupi::module::box_roi_pool_output_size: [5, 7, 9]
  lupi::module::box_fg_iou_thresh: [0.5, 0.6]
  lupi::module::box_bg_iou_thresh: [0.4, 0.5]
  lupi::module::box_batch_size_per_image: [16, 32, 64, 128]
  lupi::module::box_positive_fraction: [0.2, 0.25, 0.3]
  lupi::module::box_nms_thresh: [0.4, 0.5, 0.6]
  lupi::module::box_detections_per_img: [25, 50, 75, 100]
  callbacks__lr_scheduler__step_size: [15, 30, 100]

dann:
# weight_decay = 1.0e-4
- default::batch_size: [16, 32, 64]
  default::lr: [1.0e-4, 1.0e-3]
  dann::model::d_steps_per_g_step: [1, 2]
  dann::model::grad_penalty: [0, 0.01, 0.1]
  dann::model::optimizer_generator__weight_decay: [1.0e-4]
  dann::model::optimizer_discriminator__weight_decay: [1.0e-4]
  dann::module::featurizer__p_dropout: [0, 0.1, 0.2, 0.5]
  dann::module::discriminator__width: [64, 128, 256]
  dann::module::discriminator__depth: [2, 3]
  dann::module::task__is_nonlinear: [true, false]
  callbacks__lr_scheduler__step_size: [15, 30, 100]
# weight_decay = 1.0e-3
- default::batch_size: [16, 32, 64]
  default::lr: [1.0e-4, 1.0e-3]
  dann::model::d_steps_per_g_step: [1, 2]
  dann::model::grad_penalty: [0, 0.01, 0.1]
  dann::model::optimizer_generator__weight_decay: [1.0e-3]
  dann::model::optimizer_discriminator__weight_decay: [1.0e-3]
  dann::module::featurizer__p_dropout: [0, 0.1, 0.2, 0.5]
  dann::module::discriminator__width: [64, 128, 256]
  dann::module::discriminator__depth: [2, 3]
  dann::module::task__is_nonlinear: [true, false]
  callbacks__lr_scheduler__step_size: [15, 30, 100]

adapt_dann:
# learning_rate = 1.0e-4, weight_decay = 1.0e-4
## constant learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-4, weight_decay = 1.0e-3
## constant learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-3, weight_decay = 1.0e-4
## constant learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-3, weight_decay = 1.0e-3
## constant learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_dann::model::batch_size: [16, 32, 64]
  adapt_dann::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_dann::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_dann::model::optimizer::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_dann::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_dann::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_dann::model::discriminator::width: [64, 128, 256]
  adapt_dann::model::discriminator::depth: [2, 3]
  adapt_dann::model::task::is_nonlinear: [true, false]
  adapt_dann::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]

adapt_mdd:
# learning_rate = 1.0e-4, weight_decay = 1.0e-4
## constant learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-4, weight_decay = 1.0e-3
## constant learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-4]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-3, weight_decay = 1.0e-4
## constant learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-4]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-4]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
# learning_rate = 1.0e-3, weight_decay = 1.0e-3
## constant learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
## decaying learning rate
- adapt_mdd::model::batch_size: [16, 32, 64]
  adapt_mdd::model::optimizer::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_enc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_enc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer_disc::learning_rate::mu_0: [1.0e-3]
  adapt_mdd::model::optimizer_disc::learning_rate::alpha: [1.0]
  adapt_mdd::model::optimizer::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_enc::weight_decay: [1.0e-3]
  adapt_mdd::model::optimizer_disc::weight_decay: [1.0e-3]
  adapt_mdd::model::encoder::dropout: [0, 0.1, 0.2, 0.5]
  adapt_mdd::model::task::is_nonlinear: [true, false]
  adapt_mdd::model::task::max_norm: [0.5, 1.0, 2.0]
  adapt_mdd::model::callbacks::update_lambda::gamma: [0.1, 1.0, 10.0]
